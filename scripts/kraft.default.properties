#
# This configuration file is intended for use in KRaft mode, where
# Apache ZooKeeper is not present.  See config/kraft/README.md for details.
#

############################# Server Basics #############################

# The role of this server. Setting this puts us in KRaft mode
# process.roles=broker,controller

# The node id associated with this instance's roles
# node.id=5

# The connect string for the controller quorum
# controller.quorum.voters=1@10.28.0.5:9093,3@10.28.0.7:9093,5@10.28.0.10:9093

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
# listeners=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
inter.broker.listener.name=PLAINTEXT

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=PLAINTEXT://127.0.0.1:9092

# Listener, host name, and port for the controller to advertise to the brokers. If
# this server is a controller, this listener must be configured.
controller.listener.names=CONTROLLER

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/tmp/kraft-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

######################################################################
####### IMPORTANT CONFIG SETTINGS ONLY RELEVANT TO KRAFT MODE ########
######################################################################
# Configs from KIP-500, KIP-631
# https://cwiki.apache.org/confluence/display/KAFKA/KIP-631%3A+The+Quorum-based+Kafka+Controller#KIP631:TheQuorumbasedKafkaController-Configurations

# If set, this must be a path to a log directory.
# This configuration determines where we put the metadata log.  
# If it is not set, the metadata log is placed in the 
# first log directory from log.dirs
#metadata.log.dir=/tmp/kraft-metadata-logs

# Maximum time in milliseconds without a successful fetch 
# from the current leader before a new election is started.
# Default value of 2000 ms
#controller.quorum.fetch.timeout.ms=2000

# Maximum time in milliseconds without a majority of the votes 
# during the candidate state before a new election is retried.
# Default value of 1000
#controller.quorum.election.timeout.ms=1000

# Maximum exponential back off time (based on the number if retries) 
# after an election timeout, before a new election is triggered.
# Default value of 1000
#controller.quorum.election.backoff.max.ms=1000

# Maximum time before a pending request is considered 
# failed and the connection is dropped.
# Default value of 2000
#controller.quorum.request.timeout.ms=2000

# Initial delay between request retries. 
# It is used for retriable request errors or lost connectivity 
# and are different from the election.backoff configs earlier described.
# Default value of 20
#controller.quorum.retry.backoff.ms=20

# The duration in milliseconds that the leader will wait 
# for writes to accumulate before flushing them to disk
# Default value of 25
#controller.quorum.append.linger.ms=25

# When initially registering with the controller quorum, 
# the number of milliseconds to wait before declaring failure 
# and exiting the broker process.
# Default value is 60000
#initial.broker.registration.timeout.ms=60000


# The length of time between broker heartbeats.
# Default value is 2000
# broker.heartbeat.interval.ms=2000

# The length of time that a broker lease lasts if no heartbeats are made.
# Default value is 9000
#broker.session.timeout.ms=9000
